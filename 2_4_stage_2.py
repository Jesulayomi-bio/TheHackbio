# -*- coding: utf-8 -*-
"""2.4 - stage 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XDq6vXBoUA3Zlmn1Q4woWzz1QgvsfHq7
"""

!pip install seaborn
!pip install pandas
!pip install matplotlib

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#Import the SIFT and FOLDX Dataset
sift_dataset = "https://raw.githubusercontent.com/HackBio-Internship/public_datasets/main/R/datasets/sift.tsv"
foldx_dataset = "https://raw.githubusercontent.com/HackBio-Internship/public_datasets/main/R/datasets/foldX.tsv"
ds = pd.read_csv(sift_dataset, delim_whitespace= True)
df = pd.read_csv(foldx_dataset, delim_whitespace= True)

# check if dataset imported properly
print(ds.head(2))
print(df.head(4))

#Create new column titled specific amino acid using protein and amino acid
ds["specific_protein_aa"] = ds["Protein"] + "_" + ds["Amino_Acid"]
df["specific_protein_aa"] = df["Protein"] + "_" + df["Amino_Acid"]

#check table
print(ds.head(3))
print(df.head(3))

"""
Merge the sift and foldx data based on similar specific amino acid aa
"""
#merged data
merged_data = pd.merge(ds, df, on= "specific_protein_aa", how="inner")
#drop redundant protein y column and amino acid y column
merged_data = merged_data.drop(columns=["Protein_y", "Amino_Acid_y"])
#rename protein x, amino acid x to protein and amino acid respectively
merged_data = merged_data.rename(columns={"Protein_x": "protein"})
merged_data = merged_data.rename(columns={"Amino_Acid_x": "amino_acid"})
print(merged_data)

"""
obtain the deleterious sift and foldx score
deletrious scores are values that show if amino acid mutation can affect the structure and function
"""
deleterious_sift = merged_data.loc[merged_data["sift_Score"] < 0.05]
deleterious_foldx = merged_data.loc[merged_data["foldX_Score"] > 2]


# Most Impact amino acid
  # amino acid  column with a sift score less than 0.05 and foldx score greater than 2 will have most impact
    #Create new table that has deleterious sift, foldx and amino acid
most_impact = merged_data.loc[(merged_data["sift_Score"] <0.05) & (merged_data["foldX_Score"] >2)]
print(most_impact)

#Generate Frequency of amino acid
amino_acid_freq = most_impact["amino_acid"].value_counts()

#Generate Barplot
amino_acid_freq.plot(kind= "bar", color= "green")
# plt.xlabel("Amino Acids")
plt.ylabel("Frequency")
plt.title("BarChart")
plt.show()

#Generate PieChart
data = amino_acid_freq.values
labels = amino_acid_freq.index
#Generate colour
colors = sns.color_palette("pastel")[0:len(labels)]

plt.pie(data, labels= labels, colors=colors, autopct= "%.1f%%")
plt.show()